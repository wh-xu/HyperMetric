# %%
import numpy as np

table1 = np.array(
    [
        [1531, 0, 0, 0, 0, 0, 0, 0],
        [0, 2035, 0, 0, 0, 0, 0, 0],
        [0, 0, 1996, 0, 0, 0, 0, 0],
        [0, 0, 0, 2034, 0, 0, 0, 0],
        [0, 0, 0, 0, 2107, 0, 0, 0],
        [0, 0, 0, 0, 0, 2158, 0, 0],
        [0, 0, 0, 0, 0, 0, 2077, 0],
        [0, 0, 0, 0, 0, 0, 0, 2354],
    ]
)

table2 = np.array(
    [
        [1387, 59, 2, 1, 0, 0, 0, 0],
        [65, 1877, 95, 3, 0, 0, 0, 0],
        [3, 89, 1810, 113, 3, 0, 0, 0],
        [0, 5, 87, 1819, 131, 4, 0, 0],
        [0, 2, 0, 96, 1888, 119, 1, 0],
        [0, 0, 0, 1, 84, 1936, 115, 0],
        [0, 0, 0, 0, 0, 96, 1883, 103],
        [0, 0, 0, 0, 0, 2, 77, 2249],
    ]
)

table3 = np.array(
    [
        [1406, 152, 10, 1, 0, 0, 0, 0],
        [117, 1696, 203, 16, 2, 0, 0, 0],
        [6, 169, 1603, 235, 17, 2, 1, 0],
        [1, 16, 167, 1631, 240, 9, 0, 0],
        [0, 2, 10, 145, 1700, 207, 14, 2],
        [0, 0, 2, 6, 143, 1805, 218, 4],
        [0, 0, 0, 0, 5, 132, 1739, 194],
        [0, 0, 0, 0, 0, 3, 105, 2154],
    ]
)

table4 = np.array(
    [
        [1347, 258, 10, 5, 0, 0, 0, 0],
        [173, 1503, 317, 39, 6, 2, 0, 0],
        [8, 242, 1431, 317, 31, 3, 1, 0],
        [2, 28, 217, 1469, 303, 11, 1, 0],
        [1, 4, 18, 199, 1571, 326, 19, 4],
        [0, 0, 3, 3, 188, 1652, 306, 8],
        [0, 0, 0, 2, 8, 161, 1616, 267],
        [0, 0, 0, 0, 0, 3, 134, 2075],
    ]
)

table5 = np.array(
    [
        [1299, 307, 17, 7, 0, 0, 0, 0],
        [207, 1324, 174, 25, 3, 2, 0, 0],
        [14, 158, 487, 130, 13, 1, 1, 0],
        [4, 26, 80, 493, 124, 8, 3, 0],
        [1, 6, 7, 60, 516, 123, 7, 0],
        [0, 0, 0, 4, 73, 535, 136, 2],
        [0, 0, 0, 0, 2, 54, 504, 104],
        [0, 0, 0, 0, 0, 0, 54, 649],
    ]
)

table6 = np.array(
    [
        [1226, 522, 86, 37, 4, 1, 0, 1],
        [276, 1142, 620, 171, 36, 12, 5, 3],
        [26, 310, 971, 602, 148, 43, 5, 0],
        [3, 49, 254, 985, 645, 141, 25, 8],
        [0, 8, 56, 216, 1049, 686, 104, 9],
        [0, 4, 9, 22, 205, 1084, 722, 105],
        [0, 0, 0, 0, 19, 187, 1058, 718],
        [0, 0, 0, 1, 1, 4, 158, 1510],
    ]
)


def apply_error_rates(x, table, levels):
    table = table.T  # tables are initialy flipped

    def apply_error_to_element(a):
        index = int(a) + levels // 2
        choices = np.arange(levels)
        if levels == 2 and a == 1:  # edge case
            index = 1
        normalized_row = table[index][:levels] / table[index][:levels].sum()
        random_choice = np.random.choice(choices, p=normalized_row)

        return random_choice - levels // 2

    vectorized_apply_error_to_elements = np.vectorize(apply_error_to_element)
    print("before:", x)

    out = vectorized_apply_error_to_elements(x)
    if levels == 2:  # edge case
        out = np.where(out >= 0, 1, -1)
    print("after:", out)
    return out


# %%
